1. Create a database for the model we built in the example. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data).

CREATE TABLE guests (
  "id" 				    INTEGER,
  "first_name"		VARCHAR(16),
  "last_name"   	VARCHAR(16),
  "address"      	VARCHAR(64),
  "phone_number" 	VARCHAR(16),
  "email"			    VARCHAR(32),

  PRIMARY KEY ("id")
);

CREATE TABLE rooms (
  "room_number"		INTEGER,
  "floor"			    INTEGER,
  "nightly_rate"	DECIMAL(19,4),

  PRIMARY KEY ("room_number")
);

CREATE TABLE reservations (
  "id" 				    INTEGER,
  "guest_id"		  INTEGER,
  "room_number" 	INTEGER,
  "check_in"  		DATE,
  "check_out" 		DATE,

  FOREIGN KEY ("room_number")
    REFERENCES "rooms" ("room_number")
    ON DELETE CASCADE,

  FOREIGN KEY ("guest_id")
    REFERENCES "guests" ("id")
    ON DELETE CASCADE,

  PRIMARY KEY ("id")
);

INSERT INTO guests
  ("id",  	"first_name",  "last_name",  	"address",  				     "phone_number",  	"email")
VALUES
  (01, 		  'Kell', 		   'Maresh', 		'10 Red London Palace', 	 '020 7946 0234', 	'kl@antari.uk'),
  (02, 		  'Delilah', 		 'Bard', 		  '06 Thieves Way', 			   '020 8579 1057', 	'lila@antari.uk'),
  (03, 		  'Rhy', 			   'Maresh', 		'10 Red London Palace', 	 '020 6432 6398', 	'princeling@housemaresh.uk'),
  (04, 		  'Alucard', 		 'Emery', 		'23 Night Spire', 			   '020 1059 1147', 	'capitan@houseemery.uk'),
  (05, 		  'Holland', 		 'Vosijk', 		'16 White London Palace',  '020 6930 5689', 	'holland@antari.uk');

INSERT INTO rooms
  ("room_number",  "floor",  "nightly_rate")
VALUES
  (100, 			       1, 		  99.99),
  (101, 			       1, 		  99.99),
  (102, 			       1, 		  99.99),
  (103, 			       1, 		  109.99),
  (200, 			       2, 		  99.99),
  (201, 			       2,  	    99.99),
  (202, 			       2, 		  99.99),
  (203, 			       2, 		  109.99),
  (300, 			       3, 		  159.99),
  (301, 			       3, 		  159.99);

INSERT INTO reservations
  ("id",  "guest_id",	"room_number",  "check_in",                          "check_out")
VALUES
  (1000,  	03,			   301,			       CURRENT_DATE - INTERVAL '45 DAYS',		CURRENT_DATE - INTERVAL '43 DAYS'),
  (1001,	  04,			   300,			       CURRENT_DATE - INTERVAL '45 DAYS',		CURRENT_DATE - INTERVAL '43 DAYS'),
  (1002,	  05,			   203,			       CURRENT_DATE - INTERVAL '30 DAYS',		CURRENT_DATE - INTERVAL '28 DAYS'),
  (1003,	  05,			   203,			       CURRENT_DATE - INTERVAL '60 DAYS',		CURRENT_DATE - INTERVAL '58 DAYS'),
  (1004,	  05,			   203,			       CURRENT_DATE - INTERVAL '90 DAYS',		CURRENT_DATE - INTERVAL '88 DAYS'),
  (1005,	  01,			   301,			       CURRENT_DATE - INTERVAL '10 DAYS',		CURRENT_DATE - INTERVAL '9 DAYS'),
  (1006,	  01,		     100,				     CURRENT_DATE - INTERVAL '5 DAYS',		CURRENT_DATE - INTERVAL '3 DAYS'),
  (1007,	  01,			   101,			       CURRENT_DATE - INTERVAL '5 DAYS',		CURRENT_DATE - INTERVAL '3 DAYS'),
  (1008,	  05,			   301,			       CURRENT_DATE - INTERVAL '5 DAYS',		CURRENT_DATE - INTERVAL '5 DAYS');

Write queries applying the following scenarios:

a. Find a guest who exists in the database and has not booked a room.

SELECT guests.first_name, guests.last_name, reservations.id AS "Reservations"
FROM guests
LEFT JOIN reservations ON guests.id = reservations.guest_id
WHERE reservations.guest_id IS NULL;

first_name	last_name    Reservations
Delilah	    Bard         null

b. Find bookings for a guest who has booked two rooms for the same dates.

SELECT A.guest_id, A.room_number, A.check_in, B.check_in, A.check_out, B.check_out
FROM reservations A, reservations B
WHERE A.check_in = B.check_in AND A.check_out = B.check_out
AND A.guest_id = B.guest_id
AND A.room_number <> B.room_number
ORDER BY A.room_number;


guest_id	 room_number	    check_in	                    check_out
1	         100	            2018-04-14T00:00:00.000Z	    2018-04-16T00:00:00.000Z
1	         101	            2018-04-14T00:00:00.000Z	    2018-04-16T00:00:00.000Z

c. Find bookings for a guest who has booked one room several times on different dates.

SELECT A.guest_id, A.room_number, B.room_number, A.check_in, B.check_in, A.check_out, B.check_out
FROM reservations A, reservations B
WHERE A.check_in <> B.check_in
AND A.guest_id = B.guest_id
AND A.room_number = B.room_number
ORDER BY A.check_in;

guest_id	  room_number	   check_in	                    check_out
5	          203	           2018-03-20T00:00:00.000Z	    2018-03-22T00:00:00.000Z
5	          203	           2018-02-18T00:00:00.000Z	    2018-02-20T00:00:00.000Z
5	          203	           2018-01-19T00:00:00.000Z     2018-01-21T00:00:00.000Z

d. Count the number of unique guests who have booked the same room.

SELECT A.room_number, COUNT(DISTINCT A.guest_id)
FROM reservations A, reservations B
WHERE A.guest_id <> B.guest_id
AND A.room_number = B.room_number
GROUP BY A.room_number;

room_number   	count
301	            3

2. Design a data model for students and the classes they have taken. The model should include the students' grades for a given class. Work through the questions from the example above. Document any assumptions you make about what data should be stored, what data types should be used, etc., and include them in a text file. Ask questions of your mentor in your next session if you are unsure about parts of your model.

Students model will have a unique student id (PK) and the student name. The Courses model will also have a unique course id (PK) and course name. The two will be associated through the gradebook model, which will have a PK and the student and course id's as foreign keys, and the grade the student made in that course. There is a many to one relationship between the gradebook and the student, because a student can have many classes but only one grade for a given class will be associated with that student. The same logic applies for the relationship between the gradebook and courses. A course can be listed many time in the gradebook because there can be more than one student enrolled in the class. But only one letter grade will correspond to a course for a single student. In reality there is a many-to-many relationship between students and courses, because students can be enrolled in many courses and a given course can have multiple students.

a. Draw the model using the notation used in the checkpoint and submit a picture. You can also use a tool like StarUML or quickdatabasediagrams.com if you choose.
Link to model:
https://app.quickdatabasediagrams.com/#/schema/tXgdxQWCHk-FG8eufQskoQ

3. Build a database for the students/classes data model. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data). Write queries for the following data:

CREATE TABLE students (
  "student_id" 		INTEGER,
  "name"			    VARCHAR(64),

  PRIMARY KEY ("student_id")
);

CREATE TABLE courses (
  "course_id"		  INTEGER,
  "course_name"		VARCHAR(64),

  PRIMARY KEY ("course_id")
);

CREATE TABLE gradebook (
  "line_id"			  INTEGER,
  "course_id"		  INTEGER,
  "student_id"		INTEGER,
  "course_grade"	VARCHAR(2),

  FOREIGN KEY ("course_id")
    REFERENCES "courses" ("course_id")
    ON DELETE CASCADE,

  FOREIGN KEY ("student_id")
    REFERENCES "students" ("student_id")
    ON DELETE CASCADE,

  PRIMARY KEY ("line_id")
);

INSERT INTO students
  ("student_id",    "name")
VALUES
  (1,               'Kell Maresh'),
  (2,               'Holland Vosijk'),
  (3,               'Delilah Bard'),
  (4,               'Rhy Maresh'),
  (5,               'Aculard Emery');

INSERT INTO courses
  ("course_id",     "course_name")
VALUES
  (1,               'Magic'),
  (2,               'Foreign Languages'),
  (3,               'Diplomacy');

INSERT INTO gradebook
  ("line_id",  "course_id",  "student_id",  "course_grade")
VALUES
  (1,		         1,			       1,			       'A'),
  (2,		         1,			       2,			       'A'),
  (3,		         1,			       3,			       'A'),
  (4,		         1,			       4,			       'D'),
  (5,		         1,			       5,			       'B'),
  (6,		         2,			       1,			       'A'),
  (7,		         2,			       2,			       'A'),
  (8,		         2,			       3,			       'C'),
  (9,		         2,			       4,			       'A'),
  (10,		       2,			       5,			       'B'),
  (11,		       3,		       	 1,			       'B'),
  (14,		       3,			       4,			       'A'),
  (15,		       3,			       5,			       'B');

a. All students who have taken a particular class.

SELECT gradebook.course_id, courses.course_name, students.name AS "Student"
FROM gradebook
JOIN courses ON gradebook.course_id = courses.course_id
JOIN students ON gradebook.student_id = students.student_id
ORDER BY gradebook.course_id;

course_id	    course_name	          Student
1	            Magic	                Kell Maresh
1	            Magic	                Holland Vosijk
1	            Magic	                Delilah Bard
1	            Magic	                Rhy Maresh
1	            Magic	                Aculard Emery
2	            Foreign Languages	    Kell Maresh
2	            Foreign Languages	    Holland Vosijk
2	            Foreign Languages	    Delilah Bard
2	            Foreign Languages	    Rhy Maresh
2	            Foreign Languages	    Aculard Emery
3	            Diplomacy	            Kell Maresh
3	            Diplomacy	            Rhy Maresh
3	            Diplomacy 	          Aculard Emery

b. The number of each grade (using letter grades A-F) earned in a particular class.

SELECT gradebook.course_grade AS "Grades for Magic", COUNT(gradebook.course_grade)
FROM gradebook
JOIN courses ON gradebook.course_id = courses.course_id
WHERE gradebook.course_id = 1
GROUP BY gradebook.course_grade;

Grades for Magic	     count
A	                     3
B	                     1
D	                     1

c. Class names and the total number of students who have taken each class in the list.

SELECT courses.course_name, COUNT(gradebook.student_id) as "Enrollment"
FROM gradebook
JOIN courses ON gradebook.course_id = courses.course_id
GROUP BY courses.course_name;

course_name	        Enrollment
Magic	              5
Foreign Languages	  5
Diplomacy	          3

d. The class taken by the largest number of students.

SELECT courses.course_name, COUNT(gradebook.course_id) AS max_enrollment
FROM courses
JOIN gradebook ON courses.course_id = gradebook.course_id
GROUP BY courses.course_name
ORDER BY max_enrollment DESC
LIMIT 1;

course_name   	max_enrollment
Magic	          5
